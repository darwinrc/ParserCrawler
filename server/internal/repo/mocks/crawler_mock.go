// Code generated by MockGen. DO NOT EDIT.
// Source: crawler.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCrawlerRepo is a mock of CrawlerRepo interface.
type MockCrawlerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerRepoMockRecorder
}

// MockCrawlerRepoMockRecorder is the mock recorder for MockCrawlerRepo.
type MockCrawlerRepoMockRecorder struct {
	mock *MockCrawlerRepo
}

// NewMockCrawlerRepo creates a new mock instance.
func NewMockCrawlerRepo(ctrl *gomock.Controller) *MockCrawlerRepo {
	mock := &MockCrawlerRepo{ctrl: ctrl}
	mock.recorder = &MockCrawlerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawlerRepo) EXPECT() *MockCrawlerRepoMockRecorder {
	return m.recorder
}

// GetUrl mocks base method.
func (m *MockCrawlerRepo) GetUrl(ctx context.Context, url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrl", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrl indicates an expected call of GetUrl.
func (mr *MockCrawlerRepoMockRecorder) GetUrl(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrl", reflect.TypeOf((*MockCrawlerRepo)(nil).GetUrl), ctx, url)
}

// StoreUrl mocks base method.
func (m *MockCrawlerRepo) StoreUrl(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUrl", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUrl indicates an expected call of StoreUrl.
func (mr *MockCrawlerRepoMockRecorder) StoreUrl(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUrl", reflect.TypeOf((*MockCrawlerRepo)(nil).StoreUrl), ctx, key, value)
}
